---
import { undefined } from "astro:schema";

/** DEBUG: make sure we’re running the project you’re editing */
console.log("Astro CWD:", process.cwd());

/** Load env (restart dev after editing .env) */
const V4 = import.meta.env.TMDB_V4_READ_TOKEN ?? process.env.TMDB_V4_READ_TOKEN;
const V3 = import.meta.env.TMDB_API_KEY ?? process.env.TMDB_API_KEY;

/** Show just a prefix so we don't leak the secret */
const tokenPrefix = V4 ? String(V4).slice(0, 10) : "(missing)";
console.log("TMDB v4 token prefix:", tokenPrefix);

/** Results & debug info */
let debug = {
  usingV4: false as boolean,
  v4Status: null as null | number,
  v4Body: null as null | string,
  v3Status: null as null | number,
  v3Body: null as null | string,
  tokenPrefix,
  cwd: process.cwd(),
};

async function fetchAll() {
  let page = 1;
  const all: any[] = [];

  while (true) {
    const res = await fetch(`https://api.themoviedb.org/4/list/8556662?page=${page}`, {
      headers: { Authorization: `Bearer ${V4}` }
    });

    if (!res.ok) {
      console.error("TMDB v4 error:", res.status, await res.text());
      break;
    }

    const data = await res.json();
    const results = Array.isArray(data.results) ? data.results : [];
    all.push(...results);

    const totalPages = Number(data.total_pages ?? 1);
    if (page >= totalPages) break;
    page += 1;
  }

  return all;
}

const items = await fetchAll();

items.sort((a, b) =>
  (a.title || a.name || "").localeCompare(
    b.title || b.name || "",
    undefined,
    { numeric: true, sensitivity: "base" }
  )
);

/** Helpers */
function yearFromDate(d: string | { release_date?: string; first_air_date?: string } | undefined) {
  let date: string | undefined;

  if (typeof d === "string") {
    date = d;
  } else if (d && typeof d === "object") {
    date = d.release_date || d.first_air_date;
  }

  if (!date) return undefined;

  const m = date.match(/^(\d{4})/);
  return m ? Number(m[1]) : undefined;
}
function posterUrl(path?: string | null, size = "w342") {
  return path ? `https://image.tmdb.org/t/p/${size}${path}` : "/placeholder.svg";
}

function displayTitle(item: { title?: string; name?: string }) {
  return item.title || item.name || "Untitled";
}
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Mark's Movie Collection</title>
    <style>
      :root { color-scheme: light dark; }
      body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; margin: 2rem auto; max-width: 1100px; padding: 0 1rem; }
      .grid { display: grid; gap: 1rem; grid-template-columns: repeat(auto-fill, minmax(160px, 1fr)); }
      .card { border: 1px solid rgba(0,0,0,.15); border-radius: 12px; overflow: hidden; }
      .card img { display:block; width:100%; height:auto; }
      .meta { padding: .5rem .75rem; }
      .title { font-weight: 600; font-size: .95rem; line-height: 1.2; margin: 0 0 .25rem; }
      .sub { opacity: .8; font-size: .85rem; margin: 0; }
      pre.debug { background: rgba(127,127,127,.1); padding: .75rem; border-radius: .5rem; font-size: .85rem; overflow: auto; }
    </style>
  </head>
  <body>
    <h1>Mark's Movie Collection</h1>

    {items.length === 0 ? (
      <>
        <p>Didn't get any items back yet.</p>
        <details open>
          <summary>Debug</summary>
          <pre class="debug">{JSON.stringify(debug, null, 2)}</pre>
          <p>Checks:</p>
          <ul>
            <li>Is <code>.env</code> in the project root (same folder as <code>package.json</code>)?</li>
            <li>Does it contain <code>TMDB_V4_READ_TOKEN=...</code> (the long JWT)?</li>
            <li>Did you <strong>restart</strong> the dev server after editing <code>.env</code>?</li>
            <li>Is the list public? If private, v3 fallback will not help.</li>
          </ul>
        </details>
      </>
    ) : (
      <section class="grid" aria-label="Movie grid">
        {items.map((m) => (
          <article class="card">
            <img src={posterUrl(m.poster_path)} alt={`${m.title} poster`} loading="lazy" />
            <div class="meta">
              <p class="title">{displayTitle(m)}</p>
              <p class="sub">{yearFromDate(m) ?? "Unknown year"}</p>
            </div>
          </article>
        ))}
      </section>
    )}
  </body>
</html>
